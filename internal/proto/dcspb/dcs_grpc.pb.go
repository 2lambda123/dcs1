// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dcspb

import (
	context "context"
	sourcebackendpb "github.com/Debian/dcs/internal/proto/sourcebackendpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DCSClient is the client API for DCS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DCSClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (DCS_SearchClient, error)
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (DCS_ResultsClient, error)
}

type dCSClient struct {
	cc grpc.ClientConnInterface
}

func NewDCSClient(cc grpc.ClientConnInterface) DCSClient {
	return &dCSClient{cc}
}

func (c *dCSClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (DCS_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &DCS_ServiceDesc.Streams[0], "/dcspb.DCS/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCSSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DCS_SearchClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type dCSSearchClient struct {
	grpc.ClientStream
}

func (x *dCSSearchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dCSClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (DCS_ResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DCS_ServiceDesc.Streams[1], "/dcspb.DCS/Results", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCSResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DCS_ResultsClient interface {
	Recv() (*sourcebackendpb.Match, error)
	grpc.ClientStream
}

type dCSResultsClient struct {
	grpc.ClientStream
}

func (x *dCSResultsClient) Recv() (*sourcebackendpb.Match, error) {
	m := new(sourcebackendpb.Match)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DCSServer is the server API for DCS service.
// All implementations must embed UnimplementedDCSServer
// for forward compatibility
type DCSServer interface {
	Search(*SearchRequest, DCS_SearchServer) error
	Results(*ResultsRequest, DCS_ResultsServer) error
	mustEmbedUnimplementedDCSServer()
}

// UnimplementedDCSServer must be embedded to have forward compatible implementations.
type UnimplementedDCSServer struct {
}

func (UnimplementedDCSServer) Search(*SearchRequest, DCS_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDCSServer) Results(*ResultsRequest, DCS_ResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method Results not implemented")
}
func (UnimplementedDCSServer) mustEmbedUnimplementedDCSServer() {}

// UnsafeDCSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DCSServer will
// result in compilation errors.
type UnsafeDCSServer interface {
	mustEmbedUnimplementedDCSServer()
}

func RegisterDCSServer(s grpc.ServiceRegistrar, srv DCSServer) {
	s.RegisterService(&DCS_ServiceDesc, srv)
}

func _DCS_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DCSServer).Search(m, &dCSSearchServer{stream})
}

type DCS_SearchServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type dCSSearchServer struct {
	grpc.ServerStream
}

func (x *dCSSearchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _DCS_Results_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DCSServer).Results(m, &dCSResultsServer{stream})
}

type DCS_ResultsServer interface {
	Send(*sourcebackendpb.Match) error
	grpc.ServerStream
}

type dCSResultsServer struct {
	grpc.ServerStream
}

func (x *dCSResultsServer) Send(m *sourcebackendpb.Match) error {
	return x.ServerStream.SendMsg(m)
}

// DCS_ServiceDesc is the grpc.ServiceDesc for DCS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DCS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcspb.DCS",
	HandlerType: (*DCSServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _DCS_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Results",
			Handler:       _DCS_Results_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dcs.proto",
}
