// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcs.proto

/*
Package dcspb is a generated protocol buffer package.

It is generated from these files:
	dcs.proto

It has these top-level messages:
	SearchRequest
	SearchReply
*/
package dcspb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchRequest struct {
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SearchReply struct {
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SearchRequest)(nil), "dcspb.SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "dcspb.SearchReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DCS service

type DCSClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
}

type dCSClient struct {
	cc *grpc.ClientConn
}

func NewDCSClient(cc *grpc.ClientConn) DCSClient {
	return &dCSClient{cc}
}

func (c *dCSClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := grpc.Invoke(ctx, "/dcspb.DCS/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DCS service

type DCSServer interface {
	Search(context.Context, *SearchRequest) (*SearchReply, error)
}

func RegisterDCSServer(s *grpc.Server, srv DCSServer) {
	s.RegisterService(&_DCS_serviceDesc, srv)
}

func _DCS_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCSServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcspb.DCS/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCSServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DCS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcspb.DCS",
	HandlerType: (*DCSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _DCS_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcs.proto",
}

func init() { proto.RegisterFile("dcs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x49, 0x2e, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x49, 0x2e, 0x2e, 0x48, 0x52, 0xe2, 0xe7, 0xe2,
	0x0d, 0x4e, 0x4d, 0x2c, 0x4a, 0xce, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xe2, 0xe5,
	0xe2, 0x86, 0x09, 0x14, 0xe4, 0x54, 0x1a, 0x59, 0x73, 0x31, 0xbb, 0x38, 0x07, 0x0b, 0x99, 0x70,
	0xb1, 0x41, 0x44, 0x85, 0x44, 0xf4, 0xc0, 0x1a, 0xf5, 0x50, 0x74, 0x49, 0x09, 0xa1, 0x89, 0x16,
	0xe4, 0x54, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xad, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2f,
	0x0b, 0xc8, 0xd9, 0x77, 0x00, 0x00, 0x00,
}
