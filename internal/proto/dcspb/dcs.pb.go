// vim:ts=2:sw=2:et

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.12.3
// source: dcs.proto

package dcspb

import (
	context "context"
	sourcebackendpb "github.com/Debian/dcs/internal/proto/sourcebackendpb"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Error_ErrorType int32

const (
	Error_CANCELLED           Error_ErrorType = 0
	Error_BACKEND_UNAVAILABLE Error_ErrorType = 1
	Error_FAILED              Error_ErrorType = 2 // TODO: is this reasonable?
	Error_INVALID_QUERY       Error_ErrorType = 3
)

// Enum value maps for Error_ErrorType.
var (
	Error_ErrorType_name = map[int32]string{
		0: "CANCELLED",
		1: "BACKEND_UNAVAILABLE",
		2: "FAILED",
		3: "INVALID_QUERY",
	}
	Error_ErrorType_value = map[string]int32{
		"CANCELLED":           0,
		"BACKEND_UNAVAILABLE": 1,
		"FAILED":              2,
		"INVALID_QUERY":       3,
	}
)

func (x Error_ErrorType) Enum() *Error_ErrorType {
	p := new(Error_ErrorType)
	*p = x
	return p
}

func (x Error_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_proto_enumTypes[0].Descriptor()
}

func (Error_ErrorType) Type() protoreflect.EnumType {
	return &file_dcs_proto_enumTypes[0]
}

func (x Error_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_ErrorType.Descriptor instead.
func (Error_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{1, 0}
}

type Event_Type int32

const (
	Event_ERROR      Event_Type = 0
	Event_PROGRESS   Event_Type = 1
	Event_MATCH      Event_Type = 2
	Event_PAGINATION Event_Type = 3
	Event_DONE       Event_Type = 4
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0: "ERROR",
		1: "PROGRESS",
		2: "MATCH",
		3: "PAGINATION",
		4: "DONE",
	}
	Event_Type_value = map[string]int32{
		"ERROR":      0,
		"PROGRESS":   1,
		"MATCH":      2,
		"PAGINATION": 3,
		"DONE":       4,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dcs_proto_enumTypes[1].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_dcs_proto_enumTypes[1]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{4, 0}
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Literal bool   `protobuf:"varint,2,opt,name=literal,proto3" json:"literal,omitempty"`
	// See https://codesearch.debian.net/apikeys/
	Apikey string `protobuf:"bytes,3,opt,name=apikey,proto3" json:"apikey,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetLiteral() bool {
	if x != nil {
		return x.Literal
	}
	return false
}

func (x *SearchRequest) GetApikey() string {
	if x != nil {
		return x.Apikey
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Error_ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=dcspb.Error_ErrorType" json:"type,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetType() Error_ErrorType {
	if x != nil {
		return x.Type
	}
	return Error_CANCELLED
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId        string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	FilesProcessed int64  `protobuf:"varint,2,opt,name=files_processed,json=filesProcessed,proto3" json:"files_processed,omitempty"`
	FilesTotal     int64  `protobuf:"varint,3,opt,name=files_total,json=filesTotal,proto3" json:"files_total,omitempty"`
	Results        int64  `protobuf:"varint,4,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *Progress) Reset() {
	*x = Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progress) ProtoMessage() {}

func (x *Progress) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progress.ProtoReflect.Descriptor instead.
func (*Progress) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{2}
}

func (x *Progress) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Progress) GetFilesProcessed() int64 {
	if x != nil {
		return x.FilesProcessed
	}
	return 0
}

func (x *Progress) GetFilesTotal() int64 {
	if x != nil {
		return x.FilesTotal
	}
	return 0
}

func (x *Progress) GetResults() int64 {
	if x != nil {
		return x.Results
	}
	return 0
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId     string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ResultPages int64  `protobuf:"varint,2,opt,name=result_pages,json=resultPages,proto3" json:"result_pages,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{3}
}

func (x *Pagination) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Pagination) GetResultPages() int64 {
	if x != nil {
		return x.ResultPages
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Event_Error
	//	*Event_Progress
	//	*Event_Match
	//	*Event_Pagination
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{4}
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetError() *Error {
	if x, ok := x.GetData().(*Event_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Event) GetProgress() *Progress {
	if x, ok := x.GetData().(*Event_Progress); ok {
		return x.Progress
	}
	return nil
}

func (x *Event) GetMatch() *sourcebackendpb.Match {
	if x, ok := x.GetData().(*Event_Match); ok {
		return x.Match
	}
	return nil
}

func (x *Event) GetPagination() *Pagination {
	if x, ok := x.GetData().(*Event_Pagination); ok {
		return x.Pagination
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type Event_Progress struct {
	Progress *Progress `protobuf:"bytes,2,opt,name=progress,proto3,oneof"`
}

type Event_Match struct {
	Match *sourcebackendpb.Match `protobuf:"bytes,3,opt,name=match,proto3,oneof"`
}

type Event_Pagination struct {
	Pagination *Pagination `protobuf:"bytes,4,opt,name=pagination,proto3,oneof"`
}

func (*Event_Error) isEvent_Data() {}

func (*Event_Progress) isEvent_Data() {}

func (*Event_Match) isEvent_Data() {}

func (*Event_Pagination) isEvent_Data() {}

var File_dcs_proto protoreflect.FileDescriptor

var file_dcs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x63, 0x73,
	0x70, 0x62, 0x1a, 0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x70, 0x62, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79,
	0x22, 0xa1, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x63, 0x73, 0x70, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x03, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0x8f, 0x02, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x37,
	0x0a, 0x03, 0x44, 0x43, 0x53, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x14, 0x2e, 0x64, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x64, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x2f, 0x64, 0x63, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x64, 0x63, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcs_proto_rawDescOnce sync.Once
	file_dcs_proto_rawDescData = file_dcs_proto_rawDesc
)

func file_dcs_proto_rawDescGZIP() []byte {
	file_dcs_proto_rawDescOnce.Do(func() {
		file_dcs_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_proto_rawDescData)
	})
	return file_dcs_proto_rawDescData
}

var file_dcs_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dcs_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dcs_proto_goTypes = []interface{}{
	(Error_ErrorType)(0),          // 0: dcspb.Error.ErrorType
	(Event_Type)(0),               // 1: dcspb.Event.Type
	(*SearchRequest)(nil),         // 2: dcspb.SearchRequest
	(*Error)(nil),                 // 3: dcspb.Error
	(*Progress)(nil),              // 4: dcspb.Progress
	(*Pagination)(nil),            // 5: dcspb.Pagination
	(*Event)(nil),                 // 6: dcspb.Event
	(*sourcebackendpb.Match)(nil), // 7: sourcebackendpb.Match
}
var file_dcs_proto_depIdxs = []int32{
	0, // 0: dcspb.Error.type:type_name -> dcspb.Error.ErrorType
	3, // 1: dcspb.Event.error:type_name -> dcspb.Error
	4, // 2: dcspb.Event.progress:type_name -> dcspb.Progress
	7, // 3: dcspb.Event.match:type_name -> sourcebackendpb.Match
	5, // 4: dcspb.Event.pagination:type_name -> dcspb.Pagination
	2, // 5: dcspb.DCS.Search:input_type -> dcspb.SearchRequest
	6, // 6: dcspb.DCS.Search:output_type -> dcspb.Event
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_dcs_proto_init() }
func file_dcs_proto_init() {
	if File_dcs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dcs_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Event_Error)(nil),
		(*Event_Progress)(nil),
		(*Event_Match)(nil),
		(*Event_Pagination)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcs_proto_goTypes,
		DependencyIndexes: file_dcs_proto_depIdxs,
		EnumInfos:         file_dcs_proto_enumTypes,
		MessageInfos:      file_dcs_proto_msgTypes,
	}.Build()
	File_dcs_proto = out.File
	file_dcs_proto_rawDesc = nil
	file_dcs_proto_goTypes = nil
	file_dcs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DCSClient is the client API for DCS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCSClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (DCS_SearchClient, error)
}

type dCSClient struct {
	cc grpc.ClientConnInterface
}

func NewDCSClient(cc grpc.ClientConnInterface) DCSClient {
	return &dCSClient{cc}
}

func (c *dCSClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (DCS_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCS_serviceDesc.Streams[0], "/dcspb.DCS/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCSSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DCS_SearchClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type dCSSearchClient struct {
	grpc.ClientStream
}

func (x *dCSSearchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DCSServer is the server API for DCS service.
type DCSServer interface {
	Search(*SearchRequest, DCS_SearchServer) error
}

// UnimplementedDCSServer can be embedded to have forward compatible implementations.
type UnimplementedDCSServer struct {
}

func (*UnimplementedDCSServer) Search(*SearchRequest, DCS_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterDCSServer(s *grpc.Server, srv DCSServer) {
	s.RegisterService(&_DCS_serviceDesc, srv)
}

func _DCS_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DCSServer).Search(m, &dCSSearchServer{stream})
}

type DCS_SearchServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type dCSSearchServer struct {
	grpc.ServerStream
}

func (x *dCSSearchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _DCS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcspb.DCS",
	HandlerType: (*DCSServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _DCS_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dcs.proto",
}
