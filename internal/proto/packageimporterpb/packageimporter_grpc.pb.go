// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package packageimporterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageImporterClient is the client API for PackageImporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageImporterClient interface {
	// Packages returns a list of Debian source package names which are present on
	// this package importer instance.
	Packages(ctx context.Context, in *PackagesRequest, opts ...grpc.CallOption) (*PackagesReply, error)
	Import(ctx context.Context, opts ...grpc.CallOption) (PackageImporter_ImportClient, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeReply, error)
	GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectReply, error)
}

type packageImporterClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageImporterClient(cc grpc.ClientConnInterface) PackageImporterClient {
	return &packageImporterClient{cc}
}

func (c *packageImporterClient) Packages(ctx context.Context, in *PackagesRequest, opts ...grpc.CallOption) (*PackagesReply, error) {
	out := new(PackagesReply)
	err := c.cc.Invoke(ctx, "/packageimporterpb.PackageImporter/Packages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageImporterClient) Import(ctx context.Context, opts ...grpc.CallOption) (PackageImporter_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &PackageImporter_ServiceDesc.Streams[0], "/packageimporterpb.PackageImporter/Import", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageImporterImportClient{stream}
	return x, nil
}

type PackageImporter_ImportClient interface {
	Send(*ImportRequest) error
	CloseAndRecv() (*ImportReply, error)
	grpc.ClientStream
}

type packageImporterImportClient struct {
	grpc.ClientStream
}

func (x *packageImporterImportClient) Send(m *ImportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageImporterImportClient) CloseAndRecv() (*ImportReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageImporterClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeReply, error) {
	out := new(MergeReply)
	err := c.cc.Invoke(ctx, "/packageimporterpb.PackageImporter/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageImporterClient) GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectReply, error) {
	out := new(GarbageCollectReply)
	err := c.cc.Invoke(ctx, "/packageimporterpb.PackageImporter/GarbageCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageImporterServer is the server API for PackageImporter service.
// All implementations must embed UnimplementedPackageImporterServer
// for forward compatibility
type PackageImporterServer interface {
	// Packages returns a list of Debian source package names which are present on
	// this package importer instance.
	Packages(context.Context, *PackagesRequest) (*PackagesReply, error)
	Import(PackageImporter_ImportServer) error
	Merge(context.Context, *MergeRequest) (*MergeReply, error)
	GarbageCollect(context.Context, *GarbageCollectRequest) (*GarbageCollectReply, error)
	mustEmbedUnimplementedPackageImporterServer()
}

// UnimplementedPackageImporterServer must be embedded to have forward compatible implementations.
type UnimplementedPackageImporterServer struct {
}

func (UnimplementedPackageImporterServer) Packages(context.Context, *PackagesRequest) (*PackagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Packages not implemented")
}
func (UnimplementedPackageImporterServer) Import(PackageImporter_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedPackageImporterServer) Merge(context.Context, *MergeRequest) (*MergeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedPackageImporterServer) GarbageCollect(context.Context, *GarbageCollectRequest) (*GarbageCollectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GarbageCollect not implemented")
}
func (UnimplementedPackageImporterServer) mustEmbedUnimplementedPackageImporterServer() {}

// UnsafePackageImporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageImporterServer will
// result in compilation errors.
type UnsafePackageImporterServer interface {
	mustEmbedUnimplementedPackageImporterServer()
}

func RegisterPackageImporterServer(s grpc.ServiceRegistrar, srv PackageImporterServer) {
	s.RegisterService(&PackageImporter_ServiceDesc, srv)
}

func _PackageImporter_Packages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).Packages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/Packages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).Packages(ctx, req.(*PackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageImporter_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageImporterServer).Import(&packageImporterImportServer{stream})
}

type PackageImporter_ImportServer interface {
	SendAndClose(*ImportReply) error
	Recv() (*ImportRequest, error)
	grpc.ServerStream
}

type packageImporterImportServer struct {
	grpc.ServerStream
}

func (x *packageImporterImportServer) SendAndClose(m *ImportReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageImporterImportServer) Recv() (*ImportRequest, error) {
	m := new(ImportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PackageImporter_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageImporter_GarbageCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GarbageCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).GarbageCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/GarbageCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).GarbageCollect(ctx, req.(*GarbageCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageImporter_ServiceDesc is the grpc.ServiceDesc for PackageImporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageImporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packageimporterpb.PackageImporter",
	HandlerType: (*PackageImporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Packages",
			Handler:    _PackageImporter_Packages_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _PackageImporter_Merge_Handler,
		},
		{
			MethodName: "GarbageCollect",
			Handler:    _PackageImporter_GarbageCollect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Import",
			Handler:       _PackageImporter_Import_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "packageimporter.proto",
}
