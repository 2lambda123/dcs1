// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packageimporter.proto

/*
Package packageimporterpb is a generated protocol buffer package.

It is generated from these files:
	packageimporter.proto

It has these top-level messages:
	PackagesRequest
	PackagesReply
	ImportRequest
	ImportReply
	MergeRequest
	MergeReply
	GarbageCollectRequest
	GarbageCollectReply
*/
package packageimporterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PackagesRequest struct {
}

func (m *PackagesRequest) Reset()                    { *m = PackagesRequest{} }
func (m *PackagesRequest) String() string            { return proto.CompactTextString(m) }
func (*PackagesRequest) ProtoMessage()               {}
func (*PackagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PackagesReply struct {
	SourcePackage []string `protobuf:"bytes,1,rep,name=source_package,json=sourcePackage" json:"source_package,omitempty"`
}

func (m *PackagesReply) Reset()                    { *m = PackagesReply{} }
func (m *PackagesReply) String() string            { return proto.CompactTextString(m) }
func (*PackagesReply) ProtoMessage()               {}
func (*PackagesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PackagesReply) GetSourcePackage() []string {
	if m != nil {
		return m.SourcePackage
	}
	return nil
}

type ImportRequest struct {
	SourcePackage string `protobuf:"bytes,1,opt,name=source_package,json=sourcePackage" json:"source_package,omitempty"`
	Filename      string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Content       []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ImportRequest) Reset()                    { *m = ImportRequest{} }
func (m *ImportRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportRequest) ProtoMessage()               {}
func (*ImportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ImportRequest) GetSourcePackage() string {
	if m != nil {
		return m.SourcePackage
	}
	return ""
}

func (m *ImportRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ImportRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ImportReply struct {
}

func (m *ImportReply) Reset()                    { *m = ImportReply{} }
func (m *ImportReply) String() string            { return proto.CompactTextString(m) }
func (*ImportReply) ProtoMessage()               {}
func (*ImportReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MergeRequest struct {
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MergeReply struct {
}

func (m *MergeReply) Reset()                    { *m = MergeReply{} }
func (m *MergeReply) String() string            { return proto.CompactTextString(m) }
func (*MergeReply) ProtoMessage()               {}
func (*MergeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GarbageCollectRequest struct {
	SourcePackage string `protobuf:"bytes,1,opt,name=source_package,json=sourcePackage" json:"source_package,omitempty"`
}

func (m *GarbageCollectRequest) Reset()                    { *m = GarbageCollectRequest{} }
func (m *GarbageCollectRequest) String() string            { return proto.CompactTextString(m) }
func (*GarbageCollectRequest) ProtoMessage()               {}
func (*GarbageCollectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GarbageCollectRequest) GetSourcePackage() string {
	if m != nil {
		return m.SourcePackage
	}
	return ""
}

type GarbageCollectReply struct {
}

func (m *GarbageCollectReply) Reset()                    { *m = GarbageCollectReply{} }
func (m *GarbageCollectReply) String() string            { return proto.CompactTextString(m) }
func (*GarbageCollectReply) ProtoMessage()               {}
func (*GarbageCollectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*PackagesRequest)(nil), "packageimporterpb.PackagesRequest")
	proto.RegisterType((*PackagesReply)(nil), "packageimporterpb.PackagesReply")
	proto.RegisterType((*ImportRequest)(nil), "packageimporterpb.ImportRequest")
	proto.RegisterType((*ImportReply)(nil), "packageimporterpb.ImportReply")
	proto.RegisterType((*MergeRequest)(nil), "packageimporterpb.MergeRequest")
	proto.RegisterType((*MergeReply)(nil), "packageimporterpb.MergeReply")
	proto.RegisterType((*GarbageCollectRequest)(nil), "packageimporterpb.GarbageCollectRequest")
	proto.RegisterType((*GarbageCollectReply)(nil), "packageimporterpb.GarbageCollectReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PackageImporter service

type PackageImporterClient interface {
	// Packages returns a list of Debian source package names which are present on
	// this package importer instance.
	Packages(ctx context.Context, in *PackagesRequest, opts ...grpc.CallOption) (*PackagesReply, error)
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportReply, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeReply, error)
	GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectReply, error)
}

type packageImporterClient struct {
	cc *grpc.ClientConn
}

func NewPackageImporterClient(cc *grpc.ClientConn) PackageImporterClient {
	return &packageImporterClient{cc}
}

func (c *packageImporterClient) Packages(ctx context.Context, in *PackagesRequest, opts ...grpc.CallOption) (*PackagesReply, error) {
	out := new(PackagesReply)
	err := grpc.Invoke(ctx, "/packageimporterpb.PackageImporter/Packages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageImporterClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportReply, error) {
	out := new(ImportReply)
	err := grpc.Invoke(ctx, "/packageimporterpb.PackageImporter/Import", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageImporterClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeReply, error) {
	out := new(MergeReply)
	err := grpc.Invoke(ctx, "/packageimporterpb.PackageImporter/Merge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageImporterClient) GarbageCollect(ctx context.Context, in *GarbageCollectRequest, opts ...grpc.CallOption) (*GarbageCollectReply, error) {
	out := new(GarbageCollectReply)
	err := grpc.Invoke(ctx, "/packageimporterpb.PackageImporter/GarbageCollect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PackageImporter service

type PackageImporterServer interface {
	// Packages returns a list of Debian source package names which are present on
	// this package importer instance.
	Packages(context.Context, *PackagesRequest) (*PackagesReply, error)
	Import(context.Context, *ImportRequest) (*ImportReply, error)
	Merge(context.Context, *MergeRequest) (*MergeReply, error)
	GarbageCollect(context.Context, *GarbageCollectRequest) (*GarbageCollectReply, error)
}

func RegisterPackageImporterServer(s *grpc.Server, srv PackageImporterServer) {
	s.RegisterService(&_PackageImporter_serviceDesc, srv)
}

func _PackageImporter_Packages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).Packages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/Packages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).Packages(ctx, req.(*PackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageImporter_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageImporter_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageImporter_GarbageCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GarbageCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageImporterServer).GarbageCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packageimporterpb.PackageImporter/GarbageCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageImporterServer).GarbageCollect(ctx, req.(*GarbageCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PackageImporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packageimporterpb.PackageImporter",
	HandlerType: (*PackageImporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Packages",
			Handler:    _PackageImporter_Packages_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _PackageImporter_Import_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _PackageImporter_Merge_Handler,
		},
		{
			MethodName: "GarbageCollect",
			Handler:    _PackageImporter_GarbageCollect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packageimporter.proto",
}

func init() { proto.RegisterFile("packageimporter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0x8b, 0xb5, 0x8e, 0x49, 0xa4, 0x23, 0x81, 0x10, 0x50, 0xc3, 0x82, 0x92, 0x53,
	0x0e, 0x0a, 0x1e, 0xbd, 0x78, 0x90, 0x80, 0x82, 0xe4, 0x05, 0x24, 0x89, 0x63, 0x28, 0x6e, 0xb3,
	0xeb, 0x26, 0x3d, 0xe4, 0x7d, 0x7d, 0x10, 0x69, 0xfe, 0x54, 0x9b, 0xae, 0xc5, 0x1e, 0x67, 0xf2,
	0xfb, 0xbe, 0xdd, 0xfc, 0x58, 0x70, 0x64, 0x92, 0x7d, 0x24, 0x39, 0xcd, 0x17, 0x52, 0xa8, 0x8a,
	0x54, 0x28, 0x95, 0xa8, 0x04, 0xce, 0x06, 0x6b, 0x99, 0xb2, 0x19, 0x9c, 0xbe, 0xb4, 0xcb, 0x32,
	0xa6, 0xcf, 0x25, 0x95, 0x15, 0xbb, 0x03, 0xeb, 0x67, 0x25, 0x79, 0x8d, 0x57, 0x60, 0x97, 0x62,
	0xa9, 0x32, 0x7a, 0xed, 0xf2, 0xae, 0xe1, 0x8f, 0x83, 0xe3, 0xd8, 0x6a, 0xb7, 0x1d, 0xcc, 0x38,
	0x58, 0x51, 0x53, 0xdc, 0x15, 0x69, 0x73, 0xc6, 0x56, 0x0e, 0x3d, 0x98, 0xbe, 0xcf, 0x39, 0x15,
	0xc9, 0x82, 0xdc, 0x51, 0x03, 0xac, 0x67, 0x74, 0xe1, 0x28, 0x13, 0x45, 0x45, 0x45, 0xe5, 0x8e,
	0x7d, 0x23, 0x30, 0xe3, 0x7e, 0x64, 0x16, 0x9c, 0xf4, 0xa7, 0x49, 0x5e, 0x33, 0x1b, 0xcc, 0x67,
	0x52, 0x39, 0xf5, 0x3f, 0x61, 0x02, 0x74, 0xf3, 0xea, 0xeb, 0x3d, 0x38, 0x8f, 0x89, 0x4a, 0x93,
	0x9c, 0x1e, 0x04, 0xe7, 0x94, 0xed, 0x79, 0x45, 0xe6, 0xc0, 0xd9, 0x30, 0x2f, 0x79, 0x7d, 0xf3,
	0x35, 0x5a, 0xdb, 0x8b, 0x3a, 0xa5, 0x18, 0xc3, 0xb4, 0xb7, 0x87, 0x2c, 0xdc, 0x12, 0x1e, 0x0e,
	0x6c, 0x7b, 0xfe, 0x4e, 0x66, 0x75, 0xf9, 0x03, 0x7c, 0x82, 0x49, 0xdb, 0x8f, 0x3a, 0x7a, 0x43,
	0xba, 0x77, 0xb1, 0x83, 0x68, 0xdb, 0x22, 0x38, 0x6c, 0xd4, 0xe0, 0xa5, 0x06, 0xfd, 0x2d, 0xd1,
	0x3b, 0xff, 0x1b, 0x68, 0xab, 0xde, 0xc0, 0xde, 0xf4, 0x82, 0x81, 0x26, 0xa2, 0x55, 0xef, 0x5d,
	0xff, 0x83, 0x6c, 0x4e, 0x49, 0x27, 0xcd, 0xeb, 0xbd, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf3,
	0x3a, 0xea, 0xe6, 0xd6, 0x02, 0x00, 0x00,
}
