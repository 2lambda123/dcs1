// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sourcebackend.proto

/*
Package sourcebackendpb is a generated protocol buffer package.

It is generated from these files:
	sourcebackend.proto

It has these top-level messages:
	FileRequest
	FileReply
	SearchRequest
	Match
	ProgressUpdate
	SearchReply
*/
package sourcebackendpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchReply_Type int32

const (
	SearchReply_MATCH           SearchReply_Type = 0
	SearchReply_PROGRESS_UPDATE SearchReply_Type = 1
)

var SearchReply_Type_name = map[int32]string{
	0: "MATCH",
	1: "PROGRESS_UPDATE",
}
var SearchReply_Type_value = map[string]int32{
	"MATCH":           0,
	"PROGRESS_UPDATE": 1,
}

func (x SearchReply_Type) String() string {
	return proto.EnumName(SearchReply_Type_name, int32(x))
}
func (SearchReply_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type FileRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type FileReply struct {
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *FileReply) Reset()                    { *m = FileReply{} }
func (m *FileReply) String() string            { return proto.CompactTextString(m) }
func (*FileReply) ProtoMessage()               {}
func (*FileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileReply) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type SearchRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// Rewritten URL (after RewriteQuery()) with all the parameters that
	// are relevant for ranking.
	RewrittenUrl string `protobuf:"bytes,2,opt,name=rewritten_url,json=rewrittenUrl" json:"rewritten_url,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchRequest) GetRewrittenUrl() string {
	if m != nil {
		return m.RewrittenUrl
	}
	return ""
}

type Match struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Line uint32 `protobuf:"varint,2,opt,name=line" json:"line,omitempty"`
	// Contents of line-2.
	Ctxp2 string `protobuf:"bytes,3,opt,name=ctxp2" json:"ctxp2,omitempty"`
	// Contents of line-1.
	Ctxp1 string `protobuf:"bytes,4,opt,name=ctxp1" json:"ctxp1,omitempty"`
	// Contents of the line containing the match.
	Context string `protobuf:"bytes,5,opt,name=context" json:"context,omitempty"`
	// Contents of line+1.
	Ctxn1 string `protobuf:"bytes,6,opt,name=ctxn1" json:"ctxn1,omitempty"`
	// Contents of line+2.
	Ctxn2    string  `protobuf:"bytes,7,opt,name=ctxn2" json:"ctxn2,omitempty"`
	Pathrank float32 `protobuf:"fixed32,8,opt,name=pathrank" json:"pathrank,omitempty"`
	Ranking  float32 `protobuf:"fixed32,9,opt,name=ranking" json:"ranking,omitempty"`
	Package  string  `protobuf:"bytes,10,opt,name=package" json:"package,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Match) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Match) GetLine() uint32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Match) GetCtxp2() string {
	if m != nil {
		return m.Ctxp2
	}
	return ""
}

func (m *Match) GetCtxp1() string {
	if m != nil {
		return m.Ctxp1
	}
	return ""
}

func (m *Match) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *Match) GetCtxn1() string {
	if m != nil {
		return m.Ctxn1
	}
	return ""
}

func (m *Match) GetCtxn2() string {
	if m != nil {
		return m.Ctxn2
	}
	return ""
}

func (m *Match) GetPathrank() float32 {
	if m != nil {
		return m.Pathrank
	}
	return 0
}

func (m *Match) GetRanking() float32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *Match) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

type ProgressUpdate struct {
	FilesProcessed uint64 `protobuf:"varint,1,opt,name=files_processed,json=filesProcessed" json:"files_processed,omitempty"`
	FilesTotal     uint64 `protobuf:"varint,2,opt,name=files_total,json=filesTotal" json:"files_total,omitempty"`
}

func (m *ProgressUpdate) Reset()                    { *m = ProgressUpdate{} }
func (m *ProgressUpdate) String() string            { return proto.CompactTextString(m) }
func (*ProgressUpdate) ProtoMessage()               {}
func (*ProgressUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProgressUpdate) GetFilesProcessed() uint64 {
	if m != nil {
		return m.FilesProcessed
	}
	return 0
}

func (m *ProgressUpdate) GetFilesTotal() uint64 {
	if m != nil {
		return m.FilesTotal
	}
	return 0
}

type SearchReply struct {
	Type           SearchReply_Type `protobuf:"varint,1,opt,name=type,enum=sourcebackendpb.SearchReply_Type" json:"type,omitempty"`
	Match          *Match           `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	ProgressUpdate *ProgressUpdate  `protobuf:"bytes,3,opt,name=progress_update,json=progressUpdate" json:"progress_update,omitempty"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchReply) GetType() SearchReply_Type {
	if m != nil {
		return m.Type
	}
	return SearchReply_MATCH
}

func (m *SearchReply) GetMatch() *Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *SearchReply) GetProgressUpdate() *ProgressUpdate {
	if m != nil {
		return m.ProgressUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*FileRequest)(nil), "sourcebackendpb.FileRequest")
	proto.RegisterType((*FileReply)(nil), "sourcebackendpb.FileReply")
	proto.RegisterType((*SearchRequest)(nil), "sourcebackendpb.SearchRequest")
	proto.RegisterType((*Match)(nil), "sourcebackendpb.Match")
	proto.RegisterType((*ProgressUpdate)(nil), "sourcebackendpb.ProgressUpdate")
	proto.RegisterType((*SearchReply)(nil), "sourcebackendpb.SearchReply")
	proto.RegisterEnum("sourcebackendpb.SearchReply_Type", SearchReply_Type_name, SearchReply_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SourceBackend service

type SourceBackendClient interface {
	// File reads the file and returns its contents.
	File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileReply, error)
	// Search performs the given query and streams matches/progress updates.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SourceBackend_SearchClient, error)
}

type sourceBackendClient struct {
	cc *grpc.ClientConn
}

func NewSourceBackendClient(cc *grpc.ClientConn) SourceBackendClient {
	return &sourceBackendClient{cc}
}

func (c *sourceBackendClient) File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := grpc.Invoke(ctx, "/sourcebackendpb.SourceBackend/File", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceBackendClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SourceBackend_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SourceBackend_serviceDesc.Streams[0], c.cc, "/sourcebackendpb.SourceBackend/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceBackendSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SourceBackend_SearchClient interface {
	Recv() (*SearchReply, error)
	grpc.ClientStream
}

type sourceBackendSearchClient struct {
	grpc.ClientStream
}

func (x *sourceBackendSearchClient) Recv() (*SearchReply, error) {
	m := new(SearchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SourceBackend service

type SourceBackendServer interface {
	// File reads the file and returns its contents.
	File(context.Context, *FileRequest) (*FileReply, error)
	// Search performs the given query and streams matches/progress updates.
	Search(*SearchRequest, SourceBackend_SearchServer) error
}

func RegisterSourceBackendServer(s *grpc.Server, srv SourceBackendServer) {
	s.RegisterService(&_SourceBackend_serviceDesc, srv)
}

func _SourceBackend_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceBackendServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcebackendpb.SourceBackend/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceBackendServer).File(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceBackend_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceBackendServer).Search(m, &sourceBackendSearchServer{stream})
}

type SourceBackend_SearchServer interface {
	Send(*SearchReply) error
	grpc.ServerStream
}

type sourceBackendSearchServer struct {
	grpc.ServerStream
}

func (x *sourceBackendSearchServer) Send(m *SearchReply) error {
	return x.ServerStream.SendMsg(m)
}

var _SourceBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sourcebackendpb.SourceBackend",
	HandlerType: (*SourceBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "File",
			Handler:    _SourceBackend_File_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _SourceBackend_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sourcebackend.proto",
}

func init() { proto.RegisterFile("sourcebackend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x8b, 0x93, 0x36, 0xe3, 0x26, 0xa9, 0xb6, 0x08, 0xad, 0xa2, 0x8a, 0xb6, 0x46, 0xa2,
	0xfd, 0x40, 0x11, 0x31, 0xe2, 0x00, 0x2d, 0x14, 0xaa, 0x4a, 0x15, 0xd1, 0x26, 0xf9, 0xe1, 0x27,
	0x72, 0x9c, 0x21, 0xb1, 0x62, 0xec, 0xed, 0x7a, 0x2d, 0xea, 0xd3, 0x70, 0x39, 0x2e, 0xc0, 0x0d,
	0xd0, 0xce, 0xc6, 0x69, 0x43, 0x28, 0x5f, 0xde, 0xf7, 0xe6, 0xed, 0xcc, 0xec, 0x9b, 0x31, 0x1c,
	0xe6, 0x59, 0xa1, 0x22, 0x9c, 0x86, 0xd1, 0x12, 0xd3, 0x59, 0x4f, 0xaa, 0x4c, 0x67, 0xac, 0xb3,
	0x41, 0xca, 0xa9, 0x7f, 0x0a, 0xde, 0xa7, 0x38, 0x41, 0x81, 0x77, 0x05, 0xe6, 0x9a, 0x31, 0x70,
	0x65, 0xa8, 0x17, 0xdc, 0x39, 0x71, 0xce, 0x9b, 0x82, 0xce, 0xfe, 0x19, 0x34, 0xad, 0x44, 0x26,
	0x25, 0xeb, 0xc2, 0x5e, 0x94, 0xa5, 0x1a, 0x53, 0x9d, 0x93, 0x68, 0x5f, 0xac, 0xb1, 0x7f, 0x03,
	0xad, 0x21, 0x86, 0x2a, 0x5a, 0x54, 0xd9, 0x9e, 0x43, 0xfd, 0xae, 0x40, 0x55, 0xae, 0xd2, 0x59,
	0xc0, 0x5e, 0x41, 0x4b, 0xe1, 0x0f, 0x15, 0x6b, 0x8d, 0xe9, 0xa4, 0x50, 0x09, 0xdf, 0xa1, 0xe8,
	0xfe, 0x9a, 0x1c, 0xab, 0xc4, 0xff, 0xed, 0x40, 0xfd, 0x36, 0xd4, 0xd1, 0xe2, 0x5f, 0x2d, 0x19,
	0x2e, 0x89, 0x53, 0xa4, 0x9b, 0x2d, 0x41, 0x67, 0x53, 0x2c, 0xd2, 0xf7, 0x32, 0xe0, 0xcf, 0x6c,
	0x31, 0x02, 0x15, 0xdb, 0xe7, 0xee, 0x03, 0xdb, 0x67, 0x1c, 0x76, 0xa9, 0xeb, 0x7b, 0xcd, 0xeb,
	0xc4, 0x57, 0x70, 0xa5, 0x4f, 0xfb, 0xbc, 0xb1, 0xd6, 0xa7, 0xfd, 0x8a, 0x0d, 0xf8, 0xee, 0x03,
	0x1b, 0x18, 0x2f, 0x4c, 0x37, 0x2a, 0x4c, 0x97, 0x7c, 0xef, 0xc4, 0x39, 0xdf, 0x11, 0x6b, 0x6c,
	0x2a, 0x98, 0x6f, 0x9c, 0xce, 0x79, 0x93, 0x42, 0x15, 0x34, 0x11, 0x19, 0x46, 0xcb, 0x70, 0x8e,
	0x1c, 0x6c, 0xed, 0x15, 0xf4, 0xbf, 0x42, 0x7b, 0xa0, 0xb2, 0xb9, 0xc2, 0x3c, 0x1f, 0xcb, 0x59,
	0xa8, 0x91, 0x9d, 0x41, 0xe7, 0x5b, 0x9c, 0x60, 0x3e, 0x91, 0x2a, 0x8b, 0x30, 0xcf, 0x71, 0x46,
	0x36, 0xb8, 0xa2, 0x4d, 0xf4, 0xa0, 0x62, 0xd9, 0x31, 0x78, 0x56, 0xa8, 0x33, 0x1d, 0x5a, 0x47,
	0x5d, 0x01, 0x44, 0x8d, 0x0c, 0xe3, 0xff, 0x72, 0xc0, 0xab, 0x86, 0x63, 0xe6, 0xf8, 0x1e, 0x5c,
	0x5d, 0x4a, 0xa4, 0x74, 0xed, 0xe0, 0xb4, 0xf7, 0xd7, 0x5e, 0xf4, 0x1e, 0x69, 0x7b, 0xa3, 0x52,
	0xa2, 0x20, 0x39, 0x7b, 0x03, 0xf5, 0xef, 0x66, 0x2a, 0x54, 0xc1, 0x0b, 0x5e, 0x6c, 0xdd, 0xa3,
	0x99, 0x09, 0x2b, 0x62, 0xd7, 0xd0, 0x91, 0xab, 0x07, 0x4d, 0x0a, 0x7a, 0x11, 0x0d, 0xc7, 0x0b,
	0x8e, 0xb7, 0xee, 0x6d, 0x3e, 0x5c, 0xb4, 0xe5, 0x06, 0xf6, 0x5f, 0x83, 0x6b, 0xba, 0x60, 0x4d,
	0xa8, 0xdf, 0x5e, 0x8c, 0x3e, 0x5c, 0x1f, 0xd4, 0xd8, 0x21, 0x74, 0x06, 0xe2, 0xcb, 0x67, 0x71,
	0x35, 0x1c, 0x4e, 0xc6, 0x83, 0x8f, 0x17, 0xa3, 0xab, 0x03, 0x27, 0xf8, 0xe9, 0x40, 0x6b, 0x48,
	0xa9, 0x2f, 0x6d, 0x6a, 0x76, 0x09, 0xae, 0xd9, 0x5e, 0x76, 0xb4, 0x55, 0xf2, 0xd1, 0xde, 0x77,
	0xbb, 0x4f, 0x44, 0x65, 0x52, 0xfa, 0x35, 0x76, 0x03, 0x0d, 0xeb, 0x07, 0x7b, 0xf9, 0xa4, 0x51,
	0x36, 0xcf, 0xd1, 0xff, 0x8c, 0xf4, 0x6b, 0x6f, 0x9d, 0x69, 0x83, 0x7e, 0xc4, 0x77, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf8, 0x57, 0xdc, 0xee, 0x9f, 0x03, 0x00, 0x00,
}
