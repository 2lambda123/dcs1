// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sourcebackendpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceBackendClient is the client API for SourceBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceBackendClient interface {
	// File reads the file and returns its contents.
	File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileReply, error)
	// Search performs the given query and streams matches/progress updates.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SourceBackend_SearchClient, error)
	// Replaces the loaded index with the specified replacement index. On a file
	// system level, the specified file is mv'ed to the file specified by
	// -index_path.
	ReplaceIndex(ctx context.Context, in *ReplaceIndexRequest, opts ...grpc.CallOption) (*ReplaceIndexReply, error)
}

type sourceBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceBackendClient(cc grpc.ClientConnInterface) SourceBackendClient {
	return &sourceBackendClient{cc}
}

func (c *sourceBackendClient) File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/sourcebackendpb.SourceBackend/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceBackendClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SourceBackend_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &SourceBackend_ServiceDesc.Streams[0], "/sourcebackendpb.SourceBackend/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceBackendSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SourceBackend_SearchClient interface {
	Recv() (*SearchReply, error)
	grpc.ClientStream
}

type sourceBackendSearchClient struct {
	grpc.ClientStream
}

func (x *sourceBackendSearchClient) Recv() (*SearchReply, error) {
	m := new(SearchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourceBackendClient) ReplaceIndex(ctx context.Context, in *ReplaceIndexRequest, opts ...grpc.CallOption) (*ReplaceIndexReply, error) {
	out := new(ReplaceIndexReply)
	err := c.cc.Invoke(ctx, "/sourcebackendpb.SourceBackend/ReplaceIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceBackendServer is the server API for SourceBackend service.
// All implementations must embed UnimplementedSourceBackendServer
// for forward compatibility
type SourceBackendServer interface {
	// File reads the file and returns its contents.
	File(context.Context, *FileRequest) (*FileReply, error)
	// Search performs the given query and streams matches/progress updates.
	Search(*SearchRequest, SourceBackend_SearchServer) error
	// Replaces the loaded index with the specified replacement index. On a file
	// system level, the specified file is mv'ed to the file specified by
	// -index_path.
	ReplaceIndex(context.Context, *ReplaceIndexRequest) (*ReplaceIndexReply, error)
	mustEmbedUnimplementedSourceBackendServer()
}

// UnimplementedSourceBackendServer must be embedded to have forward compatible implementations.
type UnimplementedSourceBackendServer struct {
}

func (UnimplementedSourceBackendServer) File(context.Context, *FileRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedSourceBackendServer) Search(*SearchRequest, SourceBackend_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSourceBackendServer) ReplaceIndex(context.Context, *ReplaceIndexRequest) (*ReplaceIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceIndex not implemented")
}
func (UnimplementedSourceBackendServer) mustEmbedUnimplementedSourceBackendServer() {}

// UnsafeSourceBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceBackendServer will
// result in compilation errors.
type UnsafeSourceBackendServer interface {
	mustEmbedUnimplementedSourceBackendServer()
}

func RegisterSourceBackendServer(s grpc.ServiceRegistrar, srv SourceBackendServer) {
	s.RegisterService(&SourceBackend_ServiceDesc, srv)
}

func _SourceBackend_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceBackendServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcebackendpb.SourceBackend/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceBackendServer).File(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceBackend_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceBackendServer).Search(m, &sourceBackendSearchServer{stream})
}

type SourceBackend_SearchServer interface {
	Send(*SearchReply) error
	grpc.ServerStream
}

type sourceBackendSearchServer struct {
	grpc.ServerStream
}

func (x *sourceBackendSearchServer) Send(m *SearchReply) error {
	return x.ServerStream.SendMsg(m)
}

func _SourceBackend_ReplaceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceBackendServer).ReplaceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcebackendpb.SourceBackend/ReplaceIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceBackendServer).ReplaceIndex(ctx, req.(*ReplaceIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceBackend_ServiceDesc is the grpc.ServiceDesc for SourceBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sourcebackendpb.SourceBackend",
	HandlerType: (*SourceBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "File",
			Handler:    _SourceBackend_File_Handler,
		},
		{
			MethodName: "ReplaceIndex",
			Handler:    _SourceBackend_ReplaceIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _SourceBackend_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sourcebackend.proto",
}
